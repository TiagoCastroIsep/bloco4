// excess array NOT NEEDED SINCE I'LL ALWAYS HAVE ONE COMMON VALUE AND JUST ONE!
        int[] commonValues = new int[rowChoicesQty + columnChoicesQty];
        int k = 1;
        // compare both arrays, keep only the common values
        for (int i = 0; i < playersPossibleChoices[0].length; i++) {
            for (int j = 0; j < playersPossibleChoices[1].length; j++) {
                if (playersPossibleChoices[0][i] == playersPossibleChoices[1][j]) {
                    commonValues[k] = playersPossibleChoices[1][j];
                    k++;
                }
            }
        }

        commonValues[0] = k - 1;

        int[] cleanedUpCommonValuesArray = trimExcessZerosFromArray(commonValues);

// truncate array
private static int[] trimExcessZerosFromArray(int[] commonValues) {
        int[] trimmedArray = new int[commonValues[0]];
        for (int i = 0; i < trimmedArray.length; i++) trimmedArray[i] = commonValues[i + 1];
        return trimmedArray;
    }

// Ex 21

/** solução desenvolvida na aula para todas as direções **/
    public static char[] lookupArray(char[][] lettersMatrix, String word) {
        char[] foundWord = new char[word.length()];

        int startColumnIndex = 0;
        int foundWordIndex = 0;
        while (startColumnIndex < lettersMatrix.length - 1) {
            for (int i = startColumnIndex; i < lettersMatrix.length; i++) {
                for (int j = 0; j < lettersMatrix.length; j++) {
                    if (startColumnIndex == 0) {
                        for (int k = 0; k < word.length(); k++) {
                            if (word.charAt(k) == lettersMatrix[i][j]) {
                                if (foundWordIndex > foundWord.length - 1) break;
                                foundWord[foundWordIndex] = lettersMatrix[i][j];
                                foundWordIndex++;
                                break;
                            }
                        }
                    } else {
                        for (int k = 0; k < word.length(); k++) {
                            if (word.charAt(i - 1) == lettersMatrix[i - 1][j]) {
                                System.out.println(lettersMatrix[i - 1][j]);
                                foundWord[i - 1] = lettersMatrix[i - 1][j];
                                break;
                            }
                        }
                    }
                }
            }
            startColumnIndex++;
        }

        int count = 0;
        for (int i = 0; i < word.length(); i++) {
            if (foundWord[i] == word.charAt(i)) count++;
        }

        if (count == foundWord.length) System.out.println("Word is found!!");

        return foundWord;
    }

    public static char[] checkColumns(char[][] lettersMatrix, String word) {
        char[] foundWords = getCharArrayFromStringWord(word);
        char[] foundChars = new char[lettersMatrix.length];
        int count = 0;

        for (int i = 0; i < lettersMatrix.length; i++) {
            for (int j = 0; j < lettersMatrix.length; j++) {
                for (int k = 0; k < foundWords.length; k++) {
                    if (foundWords[k] == lettersMatrix[i][j]) {
                        foundChars[count] = lettersMatrix[i][j];
                        count++;
                        break;
                    }
                }
            }
        }

        System.out.println(foundChars);

        return foundChars;
    }